//---------------------------------------------------------------------------

#pragma hdrstop

#include "UnikeyCommands.h"
#include "mainUnit.h"
#include "globals.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------

DWORD UniKeyClass::FindDongle()
{
	mainForm->LogToFile("UniKeyClass::FindDongle");
	rt = UniKey_Find(&mHand, &HID, &lP2);
	if (rt != 0)
		HID = 0;
	UnicodeString hid = HID;
	mainForm->LogToFile("UniKey_Find: hid = " + hid);

	return HID;

}
//---------------------------------------------------------------------------

void UniKeyClass::OpenDongle()
{
	mainForm->LogToFile("UniKeyClass::OpenDongle");
    mP1 = 1234;
	mP2 = 1234;
	mP3 = 1234;
	mP4 = 1234;
	mHardID = HID;
	rt = UniKey_User_Logon(&mHand, &mP1, &mP2);
}
//---------------------------------------------------------------------------

void UniKeyClass::WriteResetLicence()
{
	mP1 = 17;
	mP2 = 18;

	for(int i = 0; i<30; i++)
		mBuf[i] = 0;

	rt = UniKey_Write_Memory(&mHand, &mP1, &mP2, &mBuf[0]);
//	if (rt != 0){
//	  str = "UniKey__Write_Memory Failed! Error code: ";
////	  FmtStr(str, 'UniKey__Write_Memory Failed! Error code: %d', [rt]);
//	  output->Lines->Append(str + rt);
//	}
//	else{
//	  str = "UniKey__Write_Memory: StartAddr = ";
////	  FmtStr(str, 'UniKey__Write_Memory: StartAddr = %d, Length = %d, Data = %s', [mp1, mp2, PAnsiChar(@mbuf[0])]);
//	  output->Lines->Append(str + mP1 + " , Length = " + mP2 + " , Data = " + PAnsiChar(&mBuf[0]));
//	}

}
//---------------------------------------------------------------------------

int UniKeyClass::ReadDongle()
{
	mainForm->LogToFile("UniKeyClass::ReadDongle");
	 mP1 = 9;
	 mP2 = 18;
	 rt = UniKey_Read_Memory(&mHand, &mP1, &mP2, &tmpBuf[0]);

	 if(tmpBuf[0] == 1)
		HaveLicense = true;
	 else
		HaveLicense = false;

	 int DBPass[6];
	 UnicodeString Pass = "";
	 for(int i = 0 ; i<6; i++){
		DBPass[i] = tmpBuf[i+2];
		Pass = Pass + IntToStr(DBPass[i]);
	 }
	 DBPassWord = Pass;
	 mainForm->LogToFile("DBPassWord = " + DBPassWord);

	 if(tmpBuf[8] == 1)
		mainForm->ResetLicense = true;
	 else
		mainForm->ResetLicense = false;

	 return tmpBuf[1];
}
//---------------------------------------------------------------------------

DWORD UniKeyClass::ReadSoftID()
{
	mainForm->LogToFile("UniKeyClass::ReadSoftID");

	SID = 0;
	rt = UniKey_Read_SoftID(&mHand, &SID);
    if (rt != 0)
		SID = 0;

	UnicodeString sid = SID;
	mainForm->LogToFile("UniKey_Find: sid = " + sid);

	return SID;
}
//---------------------------------------------------------------------------

void UniKeyClass::LogOff()
{
	mainForm->LogToFile("UniKeyClass::LogOff");
	rt = UniKey_Logoff(&mHand);
}

