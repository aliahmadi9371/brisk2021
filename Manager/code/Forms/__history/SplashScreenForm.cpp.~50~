//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "SplashScreenForm.h"
#include "mainUnit.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "AdvTreeComboBox"
#pragma link "AdvWiiProgressBar"
#pragma link "AdvGlowButton"
#pragma link "CurvyControls"
#pragma link "HTMLabel"
#pragma link "dbhtmlab"
#pragma resource "*.dfm"
TSplashForm *SplashForm;
//---------------------------------------------------------------------------
__fastcall TSplashForm::TSplashForm(TComponent* Owner)
	: TForm(Owner)
{

}
//---------------------------------------------------------------------------

__fastcall TSplashForm::~TSplashForm()
{

}
//---------------------------------------------------------------------------

void __fastcall TSplashForm::Button2Click(TObject *Sender)
{
	mainForm->ExitApp();
	Application->Terminate();
}
//---------------------------------------------------------------------------
void __fastcall TSplashForm::Button1Click(TObject *Sender)
{
	this->Enabled = false;

	mainForm->AppMode = GetAppMode(ComboBoxModes->ItemIndex);

	ApplicationTable.App_LastMode_Val = mainForm->AppMode;
	mainForm->myDataBase->Execute(mainForm->myDataBase->myQuery->Update("APPLICATION_CONFIG"));


	AdvWiiProgressBar->Show();
	mainForm->ShowAfrerSpalsh();

	mainForm->LogToFile("SplashForm : Button1Click : app mode : " + IntToStr(mainForm->AppMode));
}
//---------------------------------------------------------------------------
void __fastcall TSplashForm::FormCreate(TObject *Sender)
{

	int tmpMode = ApplicationTable.App_LastMode_Val;


	if( (tmpMode != 1) && (tmpMode != 2)  && (tmpMode != 3) && (tmpMode != 4) && (tmpMode != 5) && (tmpMode != 6) && (tmpMode != 7) )
		tmpMode = 1;
	ApplicationTable.App_LastMode_Val = tmpMode;
	mainForm->myDataBase->Execute(mainForm->myDataBase->myQuery->Update("APPLICATION_CONFIG"));

	LabelTel->Caption = InfoTable.tel;
	LabelUrl->Caption = InfoTable.url;


	mainForm->AppMode = tmpMode;

	ComboBoxModes->ItemIndex = GetItemIndex(mainForm->AppMode);
	this->Hide();

	mainForm->LogToFile("SplashForm : FormCreate : app mode from ini : " + IntToStr(tmpMode));
}
//---------------------------------------------------------------------------

void TSplashForm::SetMainSize(int width, int height)
{
	this->Width = width;
	this->Height = height;
}
//---------------------------------------------------------------------------

void TSplashForm::SetMainGeo(int top, int left)
{
	this->Top = top;
	this->Left = left;
}
//---------------------------------------------------------------------------

void TSplashForm::SetOtherGeo()
{
	AdvWiiProgressBar->Hide();

	first = false;
}
//---------------------------------------------------------------------------

void __fastcall TSplashForm::FormShow(TObject *Sender)
{
	if(!first){
		first = true;

		Image1->Left = Width/2 - Image1->Width/2;
		Image1->Top = 40;

		Button1->Width = Image1->Width/2 - 2;
		Button1->Height = Height/8;

		Button2->Width = Button1->Width;
		Button2->Height = Button1->Height;

		Button1->Left = Width/2 - Button1->Width - 2;
		Button1->Top = 40 + Image1->Height + 5;
		Button2->Left = Width/2 + 2;
		Button2->Top = 40 + Image1->Height + 5;

		AdvWiiProgressBar->Left = Width/2 - AdvWiiProgressBar->Width/2 - 10;
		AdvWiiProgressBar->Top = Height/2 - AdvWiiProgressBar->Height/2 - 20;

		ComboBoxModes->Width = Button1->Width + Button2->Width + 4;
		ComboBoxModes->Height = Button1->Height;
		ComboBoxModes->Left = Button1->Left;
		ComboBoxModes->Top = Button1->Top + Button1->Height + 5;

		LabelUrl->Height = Button1->Height*3/4;
		LabelTel->Height = Button1->Height*3/4;

		LabelUrl->Top = Height - 5 - LabelUrl->Height;
		LabelTel->Top = LabelUrl->Top;

		LabelUrl->Left = Button1->Left;
		LabelTel->Left = Button2->Left + Button2->Width - LabelTel->Width;

        ExpiredLabel->Top = Button1->Top;
		ExpiredLabel->Left = Width/2 - ExpiredLabel->Width/2;
		switch(mainForm->Mode){
			case 0:{
				ComboBoxModes->Items->Add("Contact");
				ComboBoxModes->Items->Add("Non-Contact");
				break;
			}
			case 1:{
				ComboBoxModes->Items->Add("Contact");
				ComboBoxModes->Items->Add("Non-Contact");
				ComboBoxModes->Items->Add("EFM");
				ComboBoxModes->Items->Add("MFM");
				break;
			}
			case 2:{
				ComboBoxModes->Items->Add("Contact");
				ComboBoxModes->Items->Add("Non-Contact");
				ComboBoxModes->Items->Add("Force Spectroscopy");
				ComboBoxModes->Items->Add("Lithogeraphy");
				break;
			}
			case 3:{
                ComboBoxModes->Items->Add("Contact");
				ComboBoxModes->Items->Add("Non-Contact");
                ComboBoxModes->Items->Add("EFM");
				ComboBoxModes->Items->Add("MFM");
				ComboBoxModes->Items->Add("Force Spectroscopy");
				ComboBoxModes->Items->Add("KPFM");
				ComboBoxModes->Items->Add("Lithogeraphy");
				break;
			}
			default:{
                ComboBoxModes->Items->Add("Contact");
				ComboBoxModes->Items->Add("Non-Contact");
				break;
			}
		}


//		Contact
//Non-Contact
//EFM
//MFM
//Force Spectroscopy
//KPFM
//Lithogeraphy

		if(mainForm->hid != 0 && mainForm->sid == 1234){
			if(!HaveLicense || (HaveLicense && (LicTable.RemainedTime >= 60))){
				ExpiredLabel->Visible = false;
				ComboBoxModes->Visible = true;
				Button1->Visible = true;
				Button2->Left = Width/2 + 2;
				Button2->Top = 40 + Image1->Height + 5;

			}
			else{
				Button1->Visible = false;
				ExpiredLabel->Caption = "Your license has been expired";
				ExpiredLabel->Visible = true;
				ComboBoxModes->Visible = false;
				Button2->Left = Width/2 - Button2->Width/2;
				Button2->Top = ComboBoxModes->Top;
			}
		}
		else{
			Button1->Visible = false;
			ExpiredLabel->Caption = "Please Connect Hardware Key";
			ExpiredLabel->Visible = true;
			ComboBoxModes->Visible = false;
			Button2->Left = Width/2 - Button2->Width/2;
			Button2->Top = ComboBoxModes->Top;

        }
	}
}
//---------------------------------------------------------------------------

void __fastcall TSplashForm::LabelUrlMouseEnter(TObject *Sender)
{
	LabelUrl->Font->Color = clAqua;
	LabelUrl->Font->Style = Label2->Font->Style;
}
//---------------------------------------------------------------------------


void __fastcall TSplashForm::LabelUrlMouseLeave(TObject *Sender)
{
	LabelUrl->Font->Color = 0x00C7C7C7;
	LabelUrl->Font->Style = Label1->Font->Style;
}
//---------------------------------------------------------------------------

void __fastcall TSplashForm::LabelUrlClick(TObject *Sender)
{
	AnsiString operation = "open";
	AnsiString Url = "www." + LabelUrl->Caption;
	ShellExecuteA(0, "open", Url.c_str(), NULL, NULL, SW_SHOWNORMAL);
}
//---------------------------------------------------------------------------

int TSplashForm::GetItemIndex(int mode)
{
	int item = 0;
	switch(mode){
		case 1:
			item = 0;
			break;
		case 2:
			item = 1;
			break;
		case 3:
			item = 2;
			break;
		case 4:
			item = 3;
			break;
		case 5:
			item = 4;
			break;
		case 6:
			item = 5;
			break;
		case 7:
			item = 6;
			break;
		default:
			item = 0;
			break;
	}
	return item;
}
//---------------------------------------------------------------------------

int TSplashForm::GetAppMode(int index)
{
	int mode = 0;
	if(mainForm->Mode != 2){
		switch(index){
			case 0:{
				mode = 1;
				break;
			}
			case 1:{
				mode = 2;
				break;
			}
			case 2:{
				mode = 3;
				break;
			}
			case 3:{
				mode = 4;
				break;
			}
			case 4:{
				mode = 5;
				break;
			}
			case 5:{
				mode = 6;
				break;
			}
			case 6:{
				mode = 7;
				break;
			}
			default:{
				mode = 1;
				break;
			}
		}
	}
	else{
        switch(index){
			case 0:{
				mode = 1;
				break;
			}
			case 1:{
				mode = 2;
				break;
			}
			case 2:{
				mode = 5;
				break;
			}
			case 3:{
				mode = 7;
				break;
			}
			default:{
				mode = 1;
				break;
			}
		}
	}


//	mainForm->LogToFile("index = " + IntToStr(index));
//	mainForm->LogToFile("mode = " + IntToStr(mode));
	return mode;
}
//---------------------------------------------------------------------------


